#!/bin/sh -e

NAME="WAD-Collector"
PIDFILE=/var/run/$NAME
RUN_AS=root
RUN_FROM=/opt/WAD_Services/WAD_Collector/dist
JARFILE=WAD_Collector.jar
DAEMON="/usr/bin/java -- -jar $JARFILE"

[ -x /usr/bin/java ] || exit 0
[ -e $RUN_FROM/$JARFILE ] || exit 0
. /lib/lsb/init-functions


running_pid()
{
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected child?
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}


running()
{
# Check if the process is running looking at /proc
# (works for all users)
    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}


d_start() {
    if start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE --chuid $RUN_AS --chdir $RUN_FROM --exec $DAEMON; then
	log_end_msg 0
    else
	log_end_msg 1
    fi
}

d_stop() {
    start-stop-daemon --stop --quiet --pidfile $PIDFILE
    if [ -e $PIDFILE ]
        then rm $PIDFILE
    fi
}

d_stop_retry30() {
    start-stop-daemon --stop --quiet --retry 30 --pidfile $PIDFILE
    if [ -e $PIDFILE ]
        then rm $PIDFILE
    fi
}

case $1 in
  start)
	log_daemon_msg "Starting $NAME"
	if running; then
               log_warning_msg "already running"
               exit 0
        fi
        rm -f $PIDFILE
	d_start
	;;
  stop)
	log_daemon_msg "Stopping $NAME"
	d_stop
	log_end_msg 0
	;;
  restart)
    log_daemon_msg "Restarting $NAME"
    d_stop_retry30
    sleep 1
    d_start
    ;;
  status)
    status_of_proc -p $PIDFILE "/usr/bin/java" $NAME && exit 0 || exit $?
    ;;
  *)
    echo "Usage: /etc/init.d/`basename $0` {start|stop|restart|status}"
    exit 1
    ;;
esac

